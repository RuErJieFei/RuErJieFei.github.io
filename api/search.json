[{"id":"1bdf437d5b44d67d86fcfa7af7f6e8ff","title":"第一个Flutter程序","content":"要点\nFlutter 如何在 Android、iOS 和 Web 里自动适应不同的 UI 体系\nFlutter 工程/项目的基本结构\n查找和使用 packages 来扩展功能\n使用热重载 (hot reload) 加快开发周期\n\n所需要的工具你需要安装两部分内容来完成本次实验： Flutter SDK 安装 和 编辑器 (editor) 设置。本 codelab 里，我们以 macOS 环境下的 Android Studio 以做演示，但你可以选用更顺手的配置。\n你可以通过如下任何设备完成本 codelab：\n\n开启开发者模式 (developer mode) 的 Android 和 / 或 iOS 真机；\niOS 模拟器 (需要安装 Xcode 工具)；\nAndroid 模拟器 (需要安装设置 Android Studio)。\n浏览器（如果需要 debug，则需要用 Chrome 浏览器）\n\n创建初始化工程\n替换 lib/main.dart删除 lib/main.dart 中的所有代码，然后替换为下面的代码，它将在屏幕的中心显示”Hello World”。\n\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget &#123;\n  @override\n  Widget build(BuildContext context) &#123;\n    return MaterialApp(\n      title: 'Welcome to Flutter',\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text('Welcome to Flutter'),\n        ),\n        body: const Center(\n          child: Text('Hello World'),\n        ),\n      ),\n    );\n  &#125;\n&#125;\n\n\n\n\n\n\n\n提示\n    在向你的工程项目中粘贴代码的时候，缩进可能会变形。你可以使用下面的 Flutter 工具修复此问题：    Android Studio 和 IntelliJ IDEA: 右键单击Dart代码，然后选择 Reformat Code with dartfmt    VS Code: 右键单击并选择 Format Document.、    Terminal: 运行 flutter format &lt;filename&gt;\n\n\n运行你的工程项目，根据不同的操作系统，你会看到如下运行结果界面：\n\n\n观察和分析\n本示例创建了一个具有 Material Design 风格的应用， Material 是一种移动端和网页端通用的视觉设计语言， Flutter 提供了丰富的 Material 风格的 widgets。在 pubspec.yaml 文件的 flutter 部分选择加入 uses-material-design: true 会是一个明智之举，通过这个可以让您使用更多 Material 的特性，比如其预定义好的 图标 集。\n主函数（main）使用了 (=&gt;) 符号，这是 Dart 中单行函数或方法的简写。\n该应用程序继承了 StatelessWidget，这将会使应用本身也成为一个 widget。在 Flutter 中，几乎所有都是 widget，包括对齐 (alignment)、填充 (padding) 和布局 (layout)。\nScaffold 是 Material 库中提供的一个 widget，它提供了默认的导航栏、标题和包含主屏幕 widget 树的 body 属性。 widget 树可以很复杂。\n一个 widget 的主要工作是提供一个 build() 方法来描述如何根据其他较低级别的 widgets 来显示自己。\n本示例中的 body 的 widget 树中包含了一个 Center widget， Center widget 又包含一个 Text 子 widget， Center widget 可以将其子 widget 树对齐到屏幕中心。\n\n使用外部Package在这一步中，你将开始使用一个名为 english_words 的开源软件包，其中包含数千个最常用的英文单词以及一些实用功能。\n你可以在 pub.dev 上找到 english_words 软件包以及其他许多开源软件包。\n\npubspec.yaml 文件管理 Flutter 应用程序的 assets（资源，如图片、package等）。在pubspec.yaml 中，将 english_words（3.1.5 或更高版本）添加到依赖项列表，如下面高亮显示的行：dependencies:\n  flutter:\n    sdk: flutter\n  cupertino_icons: ^1.0.2\n  english_words: ^4.0.0\n在 Android Studio 的编辑器视图中查看 pubspec.yaml 文件时，点击 Pub get 会将依赖包安装到你的项目。你应该会在控制台中看到以下内容：flutter pub get\nRunning &quot;flutter pub get&quot; in startup_namer...\nProcess finished with exit code 0\n在 lib/main.dart 中引入，如下所示：在你输入时，Android Studio会为你提供有关库导入的建议。然后它将呈现灰色的导入字符串，让你知道导入的库截至目前尚未被使用。import &#39;package:english_words&#x2F;english_words.dart&#39;;\nimport &#39;package:flutter&#x2F;material.dart&#39;;\n接下来，我们使用 English words 包生成文本来替换字符串”Hello World”：import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget &#123;\n  @override\n  Widget build(BuildContext context) &#123;\n    final wordPair = WordPair.random();\n    return MaterialApp(\n      title: 'Welcome to Flutter',\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text('Welcome to Flutter'),\n        ),\n        body: const Center(\n          child: Text(wordPair.asPascalCase),\n        ),\n      ),\n    );\n  &#125;\n&#125;\n如果应用程序正在运行，请使用热重载按钮 更新正在运行的应用程序。每次单击热重载或保存项目时，都会在正在运行的应用程序中随机选择不同的单词对。这是因为单词对是在 build 方法内部生成的。每次 MaterialApp 需要渲染时或者在 Flutter Inspector 中切换平台时 build 都会运行。\n在控制台中按s也可以热更新\n\n","slug":"flutter/first_program","date":"2021-09-21T01:57:26.663Z","categories_index":"Flutter","tags_index":"Technology","author_index":"杨阳"},{"id":"90dfcfb0ed4ca7c1284cfb168f48d8ef","title":"编辑工具","content":"你可以使用任意文本编辑器，结合我们的命令行工具来开发 Flutter 应用。然而，我们推荐使用我们的编辑器插件以获取更好的开发体验。这些插件提供了代码补全、代码高亮、widget 辅助编辑的功能，以及为项目的运行和调试提供支持等。\nAndroid Studio and IntelliJ\n打开 IDE，选择 新 Flutter 项目 (Create New Flutter Project).\n选择 Flutter 应用程序 作为项目类型，然后点 下一步\n确认 Flutter SDK 路径 区域所示路径是正确的 SDK 路径。如果你还没有安装 SDK，需要先进行安装，选择 Install SDK…。\n输入项目名称(比如 ‘myapp’), 然后点击下一步。\n点击 完成。\n待 Android Studio 安装 SDK 后，创建项目。\n\n\n\n\n\n\n\n提示\n     每当创建一个新的 Flutter 应用时候，一些 Flutter IDE 插件会请你输入一个类似 com.example 的包名，包名（在 iOS 里叫套装 ID）一般都是把公司域名的反着写了。如果你的应用打算上架商店，建议一开始的时候把这个全网唯一的包名设置好，因为应用上架之后就不能再修改了。\n\nFlutter&amp;Dart插件安装Mac安装过程如下：\n\n打开 Android Studio。\n打开插件设置（在 v3.6.3.0 以上的系统打开 Preferences &gt; Plugins）。\n然后选择 Flutter 插件并点击 安装。\n当弹出安装 Dart 插件提示时，点击 Yes。\n当弹出重新启动提示时，点击 Restart。\n\nLinux 或者 Windows 平台参考使用下面介绍的步骤：\n\n打开插件偏好设置 (位于 File &gt; Settings &gt; Plugins)\n选择 **Marketplace (扩展商店)**，选择 Flutter plugin 然后点击 **Install (安装)**。\n\n运行\n找到 Android Studio 的工具条:\n在 目标选择器，选择一个 Android 设备来运行程序。如果列表里没有可用设备，选择 **工具 &gt; AVD Manager 然后在这个窗口中创建一个新的虚拟机。更多详细介绍，参见 管理 AVDs。\n点击工具栏中的 Run 图标，或者在菜单中选择 Run &gt; Run。\n\n\n\n\n\n\n\n\n\n\n当应用编译完成后，就可以在设备上运行这个起步应用了。\n\nVisual Studio Code\n打开 View &gt; Command Palette。\n输入 “flutter”，选择 Flutter: New Application Project。\n创建或者选择新项目的父文件夹。\n输入项目名称，比如 myapp，然后点 Enter。\n稍等一下项目创建成功，目录中就会生成 main.dart 文件。\n\n\n\n\n\n\n\n\n\n\n上面的操作会创建一个叫做 myapp 的 Flutter 项目目录该目录中包含一个用到 Material Components简单的示例程序。\nFlutter&amp;Dart插件安装\n打开 VS Code。\n打开 查看 &gt; 命令面板…。\n输入 “install”，然后选择 扩展: 安装扩展。\n在扩展搜索输入框中输入 “flutter”，然后在列表中选择 Flutter 并单击 安装。此过程中会自动安装必需的 Dart 插件。\n点击 重新加载 以重新启动 VS Code。\n\n运行\n找到 VS Code 的状态栏(窗口底部蓝色的条)\n\n从 Device Selector 里选择一个设备。更多详细内容，请参见 在 Flutter 设备中快速切换。\n\n如果没有可用设备而且你也打算用模拟器，点击 No Devices 然后打开一个模拟器。\n 请注意\n当你在 VS Code 中点击 No Devices 的时候，你也许看不到 Start iOS Simulator 选项。如果你使用 Mac，你可能得运行以下命令才能启动模拟器。\nopen -a simulator\n\nAndroid 是不可能启动 iOS 模拟器的。\n\n要设置真实设备，请在操作系统的安装页面进行操作。\n\n\n\n选择 Run &gt; 开始 Debugging 或者按F5。\n\n当应用启动以后— 处理进度会出现在 Debug Console 页面中。\n\n\n\n\n\n\n\n\n\n\n\n当应用编译完成后，就可以在设备上运行这个起步应用了。\n\n","slug":"flutter/tool","date":"2021-09-21T01:57:10.142Z","categories_index":"Flutter","tags_index":"Technology","author_index":"杨阳"},{"id":"9d7a6a8b2554051d7ac868824b57788a","title":"安装和配置 Flutter 开发环境","content":"系统配置要求要想安装和运行 Flutter，你的开发环境至少应该满足如下的需求：\n\nWindows\n\n操作系统：Windows 7 SP1 或更高的版本（基于 x86-64 的 64 位操作系统）。\n\n磁盘空间：除安装 IDE 和一些工具之外还应有至少 1.64 GB 的空间。\n\n工具：要让 Flutter 在你的开发环境中正常使用，依赖于以下的工具：\n\nWindows PowerShell 5.0 或者更高的版本（Windows 10 中已经预装了）\n\nGit for Windows 2.x，并且勾选从 Windows 命令提示符使用 Git 选项。\n如果 Windows 版的 Git 已经安装过了，那么请确保能从命令提示符或者 PowerShell 中直接执行 git 命令。\n\n\n\n\n\nMac\n\n操作系统：macOS\n磁盘空间：2.8 GB（不包含 IDE 或其余工具所需要的磁盘空间）\n工具：Flutter 使用 git 进行安装和升级，我们建议您安装包含了 git 的 Xcode，或者您也可以 单独安装 git。\n\n\n\n获取 Flutter SDK\n想要获取到其他版本的安装包，请参阅 SDK 版本列表 页面。\n\n将文件解压到目标路径\n\n\n\n\n\n\n\n\n\n只需要将sdk存放至自定义文件夹，记得保持路径。\n\n配置 flutter 的 PATH 环境变量\n\nWindows\n\n在开始菜单的搜索功能键入「env」，然后选择 编辑系统环境变量。\n在 用户变量 一栏中，检查是否有 Path 这个条目：\n如果存在这个条目，以 ; 分隔已有的内容，加入 flutter\\bin 目录的完整路径。\n如果不存在的话，在用户环境变量中创建一个新的 Path 变量，然后将 flutter\\bin 所在的完整路径作为新变量的值。\n\n\n\n你需要重新打开已经打开的命令行提示符窗口，这样下次启动命令提示符时，才能访问到刚才修改的变量。\n\nMac\n\n首先决定你想要将 Flutter SDK 下载或者通过 git clone 命令到哪一个目录内获取并记录这个目录的路径\n\n\n\n\n\n\n你将要在之后的步骤用到它\n\n\n\n打开或者创建 shell 的 rc 文件，比如，在 Linux 和 macOS Mojave 或 Mojave 之前的系统里，是默认使用 Bash 的，所以需要修改 $HOME/.bashrc 文件。 macOS Catalina 操作系统默认使用 Z Shell，所以需要修改 $HOME/.zshrc 文件。请知晓，如果你使用不同的 shell，文件目录或文件名可能会有所不同。\n\n在文件中增加下列这行命令，并将其中的 [PATH_OF_FLUTTER_GIT_DIRECTORY] 更改为你第一步获取到的路径：\n\n\n$ export PATH&#x3D;&quot;$PATH:[PATH_OF_FLUTTER_GIT_DIRECTORY]&#x2F;bin&quot;\n\n\n运行 source $HOME/.bash_profile 来刷新当前命令行窗口。\n\n通过运行以下命令来验证 flutter/bin 文件夹是否已经添加到 PATH 环境变量中：\n\n\n$ echo $PATH\n\n验证 flutter 命令是否可用，可以执行下面的命令检测：\n$ which flutter\n\n运行 flutter doctor\n\n\n\n上述命令会检查你的现有环境，并将检测结果以报告形式呈现出来。仔细阅读它显示的内容，检查是否有尚未安装的软件或是有其他的步骤需要完成（通常会以粗体呈现）。\n[✓] Flutter (Channel stable, 2.2.4-0.0.pre.1, on macOS 11.6 20G165 darwin-arm,\n    locale zh-Hans-CN)\n[✓] Android toolchain - develop for Android devices (Android SDK version 31.0.0)\n[✓] Xcode - develop for iOS and macOS\n[✓] Chrome - develop for the web\n[!] Android Studio (version 2020.3)\n    ✗ Unable to find bundled Java version.\n[✓] IntelliJ IDEA Ultimate Edition (version 2021.1.3)\n[✓] VS Code (version 1.60.1)\n[✓] Connected device (1 available)\n\n每当您安装了任何一个的依赖项，就可以随时执行 flutter doctor 来检查是否正确配置了所有内容。\n","slug":"flutter/start","date":"2020-08-15T10:49:36.000Z","categories_index":"Flutter","tags_index":"Technology","author_index":"杨阳"}]